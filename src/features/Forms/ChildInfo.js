import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { baseUrl } from "../config"; // Import base API URL from configuration

// Define childApi slice
export const childApi = createApi({
  reducerPath: "childApi", // Unique key for this API slice
  baseQuery: fetchBaseQuery({
    baseUrl, // Base URL for API requests
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("token"); // Retrieve token from local storage
      if (token) {
        headers.set("authorization", `Bearer ${token}`); // Set token in authorization header if available
      }
      return headers;
    },

    // Custom response handler for managing JSON or plain text responses
    responseHandler: (response) =>
      response.text().then((text) => {
        try {
          return JSON.parse(text); // Parse JSON response if possible
        } catch {
          return text; // Return as text if JSON parsing fails
        }
      }),
  }),

  endpoints: (builder) => ({
    // Endpoint for creating a new child user
    childUser: builder.mutation({
      query: (userData) => ({
        url: "/child",
        method: "POST",
        body: userData, // Pass child user data as the request body
      }),
    }),

    // Endpoint for fetching all children
    fetchChildren: builder.query({
      query: () => ({
        url: "/children",
        method: "GET",
      }),
    }),

    // Endpoint for deleting a specific child by URN
    deleteChild: builder.mutation({
      query: (urn) => ({
        url: `/child/${urn}`,
        method: "DELETE",
      }),
    }),
  }),
});

// Export hooks for each endpoint, auto-generated by RTK Query
export const { useChildUserMutation, useFetchChildrenQuery, useDeleteChildMutation } = childApi;
