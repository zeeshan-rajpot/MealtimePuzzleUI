import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { baseUrl } from "../config"; // Import base API URL from configuration

// Define the interventionApi slice
export const interventionApi = createApi({
  reducerPath: "interventionApi", // Unique key for this API slice
  baseQuery: fetchBaseQuery({
    baseUrl, // Base URL for API requests
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("token"); // Retrieve token from local storage
      if (token) {
        headers.set("authorization", `Bearer ${token}`); // Set token in authorization header if available
      }
      return headers;
    },
  }),

  endpoints: (builder) => ({
    // Mutation to add a new intervention for a child
    addIntervention: builder.mutation({
      query: ({ childUrn, domains }) => ({
        url: `/post/Intervention`,
        method: "POST",
        body: { childUrn, domains }, // Include child URN and domains data in the request body
      }),
    }),

    // Query to get intervention data for a specific child and session
    getIntervention: builder.query({
      query: ({ urn, session }) => ({
        url: `/get/Intervention/${urn}/${session}`,
        method: "GET",
      }),
    }),

    // Mutation to update intervention data for a specific child and session
    updateIntervention: builder.mutation({
      query: ({ urn, session, domains }) => ({
        url: `/put/Intervention/${urn}/${session}`,
        method: "PUT",
        body: { domains }, // Pass the updated domains data in the request body
      }),
    }),
  }),
});

// Export hooks for each endpoint, auto-generated by RTK Query
export const {
  useAddInterventionMutation,
  useGetInterventionQuery,
  useUpdateInterventionMutation,
} = interventionApi;
